#include "Timer.h"
#include "Leds.h"
#include "LPLC.h"

module LPLC
{
	uses interface AMPacket;
	uses interface Leds;
	uses interface Boot;
	uses interface Timer<TMilli> as CounterTimer;
	uses interface AMSend;
	uses interface Receive;
	uses interface Packet;
	uses interface SplitControl as AMControl;
	uses interface startPeriodicalRadio as SPradio;
	uses interface PacketAcknowledgements as Ack;
	uses interface shareFlag as shareflag;
}
implementation
{
	uint16_t counter = 0;
	bool SendDone_flag = FALSE;
	message_t pkt;
	void Send();
	
	event void Boot.booted() {     
		call SPradio.startPeriodicRadio(1000,20);
		//call CounterTimer.startPeriodic(30000);
	}

	event void CounterTimer.fired() {
		Send();		
	}
	
	void Send() {
		LPLMsg* LPLmsg = (LPLMsg*)(call Packet.getPayload(&pkt, sizeof(LPLMsg)));
		
		if(call shareflag.What_is_myPeriod() > 900)
			call shareflag.This_is_myPeriod(call shareflag.What_is_myPeriod()-500);
		else
			call shareflag.This_is_myPeriod(500);
		
		if(LPLmsg == NULL) { return; }
		
		LPLmsg -> nodeid = TOS_NODE_ID;
		LPLmsg -> pktSequence = counter;
		LPLmsg -> myPeriod = call shareflag.What_is_myPeriod();
		
		call AMSend.send(8, &pkt, sizeof(LPLMsg));
		counter++;
		
		return;		
	}	

	event void AMSend.sendDone(message_t *msg, error_t error){
	}
	
	event message_t * Receive.receive(message_t *msg, void *payload, uint8_t len){
		call AMSend.send(8,msg,len);
		return msg;
	}

	event void AMControl.startDone(error_t error){
		
	}

	event void AMControl.stopDone(error_t error){
	}
}

